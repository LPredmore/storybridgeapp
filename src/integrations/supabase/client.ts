// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { isTWA } from '@/utils/twaDetection';

const SUPABASE_URL = "https://hyiyuhjabjnksjbqfwmn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh5aXl1aGphYmpua3NqYnFmd21uIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzI0NTU1NjEsImV4cCI6MjA0ODAzMTU2MX0.hE2rTn4kMe34WfKgiizQQ9t1MLWVQuKJt-7r8v2M3ZE";

// Configure auth options for TWA session persistence
const authOptions = {
  auth: {
    // Always persist sessions, especially important for TWA
    persistSession: true,
    // Use localStorage for better TWA compatibility
    storage: {
      getItem: (key: string) => {
        try {
          const value = localStorage.getItem(key);
          return value;
        } catch (error) {
          console.warn('Auth storage getItem error:', error);
          return null;
        }
      },
      setItem: (key: string, value: string) => {
        try {
          localStorage.setItem(key, value);
        } catch (error) {
          console.warn('Auth storage setItem error:', error);
        }
      },
      removeItem: (key: string) => {
        try {
          localStorage.removeItem(key);
        } catch (error) {
          console.warn('Auth storage removeItem error:', error);
        }
      }
    },
    // Increase token refresh margin for TWA
    autoRefreshToken: true,
    // Detect session on init for TWA
    detectSessionInUrl: true,
    // Flow type for TWA compatibility
    flowType: 'pkce' as const
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, authOptions);